# -*- coding: utf-8 -*-
"""Ejercicio_pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pWWQb1N13r6fAnXuFXamwUSF1zUrJ-4J

# Práctica de la librería Pandas

Este es mi notebook relacionado con el ejercicio desarrollado en el curso de Udemy "Python Total".
"""

# Importamos Pandas
import pandas as pd

# Creamos una serie de números y hallamos su media
numeros = pd.Series([1, 2, 3, 4, 5])
print(numeros.mean())

# Hallamos la suma de dichos números
print(numeros.sum())

# Creamos una SERIE de tres colores diferentes
colores = pd.Series(["rojo", "verde", "azul"])
print(colores)

# Creamos una serie con tipos de autos, y la visualizamos
autos = pd.Series(["sedan", "troca", "nave"])
print(autos)

# Combinamos las series de tipos de autos y colores en un DATAFRAME
tabla = pd.DataFrame({"autos": autos, "colores": colores})
print(tabla)

# Conectamos el cuaderno actual con nuestro Drive
from google.colab import drive
drive.mount('/content/drive')

# Importar "ventas-autos.csv" y convertirlo en un nuevo DATAFRAME
venta_autos = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/ventas-autos.csv")
print(venta_autos)

# Exportar el Dataframe como un archivo CSV a mi carpeta "/content/drive/MyDrive/Colab Notebooks/pruebas/"
venta_autos.to_csv("/content/drive/MyDrive/Colab Notebooks/ventas-autos.csv")

# Analicemos los tipos de datos disponibles en el dataset de ventas autos
venta_autos.dtypes

# Apliquemos estadística descriptiva (cantidad de valores, media, desviación estándar, valores mínimos y máximos, cuartiles) al dataset
venta_autos.describe()

# Obtenemos información del dataset utilizando info()
venta_autos.info()

# Listamos los nombres de las columnas de nuestro dataset
venta_autos.columns

# Averiguamos el "largo" de nuestro dataset
len(venta_autos)

# Mostramos las primeras 5 filas del dataset
venta_autos.head(5)

# Mostramos las primeras 7 filas del dataset
venta_autos.head(7)

# Mostramos las últimas 5 filas del dataset
venta_autos.tail(5)

# Utilizamos .loc para seleccionar la fila de índice 3 del DataFrame
venta_autos.loc[3]

# Utilizamos .iloc para seleccionar las filas 3, 7 y 9
venta_autos.iloc[[3, 7, 9]]

"""En la documentación podrás observar la diferencia entre el funcionamiento de [.loc](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.loc.html) e [.iloc](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html)."""

# Seleccionar la columna "Kilometraje"
venta_autos["Kilometraje"]

# Encontrar el valor medio de la columnas "Kilometraje"
venta_autos["Kilometraje"].mean()

# Seleccionar aquellas columnas que tengan valores superiores a 100,000 kilómetros en la columna Kilometraje
venta_autos[venta_autos["Kilometraje"] > 100000]

# Creamos una tabla cruzada de doble entrada entre Fabricante y cantidad de puertas
pd.crosstab(venta_autos["Fabricante"], venta_autos["Puertas"])

# Commented out IPython magic to ensure Python compatibility.
# Importamos Matplotlib y creamos un gráfico con los valores de la columna Kilometraje
import matplotlib as plt
# %matplotlib inline

venta_autos["Kilometraje"].plot()

# Puede que un gráfico más apropiado en este caso sea un histograma?
venta_autos["Kilometraje"].hist

"""No funcionó, verdad? Alguna idea de por qué esto puede ocurrir?

Una pista es buscar: "cómo convertir strings de Pandas a números"

[Aqui hay un enlace a StackOverflow referido a este tema](https://stackoverflow.com/questions/44469313/price-column-object-to-int-in-pandas).
"""

# Elimina la puntuación de la columna de precios
venta_autos["Precio (USD)"] = venta_autos["Precio (USD)"].str.replace(r"[,\$\.]", "", regex=True)
venta_autos["Precio (USD)"] = venta_autos["Precio (USD)"].astype(int)/100
venta_autos["Precio (USD)"]

venta_autos["Precio (USD)"].plot()